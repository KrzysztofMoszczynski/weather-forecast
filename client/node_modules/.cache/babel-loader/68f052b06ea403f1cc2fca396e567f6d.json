{"ast":null,"code":"import axios from \"axios\";\nconst apiKey = \"f14f6a8afb9f48fa4104b86989623adf\";\nconst database = {\n  async getWeatherByCityName(city) {\n    const createWeatherList = (dateTime, temperature, weatherMain, weatherDescription, pressure, humidity, windSpeed) => ({\n      dateTime,\n      temperature,\n      weatherMain,\n      weatherDescription,\n      pressure,\n      humidity,\n      windSpeed\n    });\n\n    const createCityData = (cityName, countryCode, timezone) => ({\n      cityName,\n      countryCode,\n      timezone\n    });\n\n    const weatherList = [];\n    var cityData = {};\n\n    try {\n      const response = await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n        params: {\n          q: city,\n          appid: apiKey\n        }\n      });\n      cityData = {\n        cityName: response.data.city.name,\n        countryCode: response.data.city.country,\n        timezone: response.data.city.timezone\n      };\n      console.log(response);\n      weatherList.push(...response.data.list.map(listElement => createWeatherList(listElement.dt_txt, listElement.main.temp, listElement.weather[0].main, listElement.weather[0].description, listElement.main.pressure, listElement.main.humidity, listElement.wind.speed)));\n      return [cityData, weatherList];\n    } catch (error) {\n      console.log(error);\n      return false;\n    } //const weatherArray = await api.openweathermap.org/data/2.5/forecast?q={Warsaw}&appid={apiKey};\n\n  }\n\n};\nexport default database;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/api/openWeatherMap.js"],"names":["axios","apiKey","database","getWeatherByCityName","city","createWeatherList","dateTime","temperature","weatherMain","weatherDescription","pressure","humidity","windSpeed","createCityData","cityName","countryCode","timezone","weatherList","cityData","response","get","params","q","appid","data","name","country","console","log","push","list","map","listElement","dt_txt","main","temp","weather","description","wind","speed","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,kCAAf;AAEA,MAAMC,QAAQ,GAAG;AACf,QAAMC,oBAAN,CAA2BC,IAA3B,EAAiC;AAC/B,UAAMC,iBAAiB,GAAG,CACxBC,QADwB,EAExBC,WAFwB,EAGxBC,WAHwB,EAIxBC,kBAJwB,EAKxBC,QALwB,EAMxBC,QANwB,EAOxBC,SAPwB,MAQpB;AACJN,MAAAA,QADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,WAHI;AAIJC,MAAAA,kBAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,QANI;AAOJC,MAAAA;AAPI,KARoB,CAA1B;;AAkBA,UAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,QAAxB,MAAsC;AAC3DF,MAAAA,QAD2D;AAE3DC,MAAAA,WAF2D;AAG3DC,MAAAA;AAH2D,KAAtC,CAAvB;;AAMA,UAAMC,WAAW,GAAG,EAApB;AACA,QAAIC,QAAQ,GAAG,EAAf;;AACA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CACrB,kDADqB,EAErB;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,CAAC,EAAElB,IAAL;AAAWmB,UAAAA,KAAK,EAAEtB;AAAlB;AAAV,OAFqB,CAAvB;AAKAiB,MAAAA,QAAQ,GAAG;AACTJ,QAAAA,QAAQ,EAAEK,QAAQ,CAACK,IAAT,CAAcpB,IAAd,CAAmBqB,IADpB;AAETV,QAAAA,WAAW,EAAEI,QAAQ,CAACK,IAAT,CAAcpB,IAAd,CAAmBsB,OAFvB;AAGTV,QAAAA,QAAQ,EAAEG,QAAQ,CAACK,IAAT,CAAcpB,IAAd,CAAmBY;AAHpB,OAAX;AAKAW,MAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACAF,MAAAA,WAAW,CAACY,IAAZ,CACE,GAAGV,QAAQ,CAACK,IAAT,CAAcM,IAAd,CAAmBC,GAAnB,CAAuBC,WAAW,IACnC3B,iBAAiB,CACf2B,WAAW,CAACC,MADG,EAEfD,WAAW,CAACE,IAAZ,CAAiBC,IAFF,EAGfH,WAAW,CAACI,OAAZ,CAAoB,CAApB,EAAuBF,IAHR,EAIfF,WAAW,CAACI,OAAZ,CAAoB,CAApB,EAAuBC,WAJR,EAKfL,WAAW,CAACE,IAAZ,CAAiBxB,QALF,EAMfsB,WAAW,CAACE,IAAZ,CAAiBvB,QANF,EAOfqB,WAAW,CAACM,IAAZ,CAAiBC,KAPF,CADhB,CADL;AAaA,aAAO,CAACrB,QAAD,EAAWD,WAAX,CAAP;AACD,KA1BD,CA0BE,OAAOuB,KAAP,EAAc;AACdb,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,aAAO,KAAP;AACD,KAxD8B,CAyD/B;;AACD;;AA3Dc,CAAjB;AA8DA,eAAetC,QAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiKey = \"f14f6a8afb9f48fa4104b86989623adf\";\r\n\r\nconst database = {\r\n  async getWeatherByCityName(city) {\r\n    const createWeatherList = (\r\n      dateTime,\r\n      temperature,\r\n      weatherMain,\r\n      weatherDescription,\r\n      pressure,\r\n      humidity,\r\n      windSpeed\r\n    ) => ({\r\n      dateTime,\r\n      temperature,\r\n      weatherMain,\r\n      weatherDescription,\r\n      pressure,\r\n      humidity,\r\n      windSpeed,\r\n    });\r\n\r\n    const createCityData = (cityName, countryCode, timezone) => ({\r\n      cityName,\r\n      countryCode,\r\n      timezone,\r\n    });\r\n\r\n    const weatherList = [];\r\n    var cityData = {};\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://api.openweathermap.org/data/2.5/forecast\",\r\n        { params: { q: city, appid: apiKey } }\r\n      );\r\n\r\n      cityData = {\r\n        cityName: response.data.city.name,\r\n        countryCode: response.data.city.country,\r\n        timezone: response.data.city.timezone,\r\n      };\r\n      console.log(response);\r\n      weatherList.push(\r\n        ...response.data.list.map(listElement =>\r\n          createWeatherList(\r\n            listElement.dt_txt,\r\n            listElement.main.temp,\r\n            listElement.weather[0].main,\r\n            listElement.weather[0].description,\r\n            listElement.main.pressure,\r\n            listElement.main.humidity,\r\n            listElement.wind.speed\r\n          )\r\n        )\r\n      );\r\n      return [cityData, weatherList];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n    //const weatherArray = await api.openweathermap.org/data/2.5/forecast?q={Warsaw}&appid={apiKey};\r\n  },\r\n};\r\n\r\nexport default database;\r\n"]},"metadata":{},"sourceType":"module"}