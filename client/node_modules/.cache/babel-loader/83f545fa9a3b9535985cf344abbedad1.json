{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krzysztof\\\\Documents\\\\GitHub\\\\weather-forecast\\\\src\\\\components\\\\day-window.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core\";\nimport SunIcon from \"../assets/images/sun.png\";\nimport CloudIcon from \"../assets/images/cloud.png\";\nimport RainIcon from \"../assets/images/rain.png\";\nimport HailIcon from \"../assets/images/hail.png\";\nimport StormIcon from \"../assets/images/storm.png\";\nimport HeavyRainIcon from \"../assets/images/heavy-rain.png\";\nimport CloudsAndSunIcon from \"../assets/images/clouds-and-sun.png\";\nimport FogIcon from \"../assets/images/fog.png\";\nimport SnowIcon from \"../assets/images/snow.png\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { Rotate90DegreesCcw } from \"@material-ui/icons\";\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: \"#273DFF\",\n    color: \"#EFEFEF\",\n    padding: 10,\n    margin: 20,\n    marginLeft: 100,\n    marginRight: 100,\n    borderRadius: 10,\n    \"& p\": {\n      margin: 1\n    }\n  },\n  topContainer: {\n    marginTop: 10,\n    marginBottom: 20\n  },\n  leftTopContainer: {\n    marginTop: 50\n  },\n  rightTopContainer: {\n    fontSize: 30,\n    paddingRight: 40,\n    paddingLeft: 10,\n    borderLeft: \"solid\",\n    borderWidth: 1\n  },\n  sectionsAlignment: {\n    marginTop: 17\n  },\n  rightTopValues: {\n    textAlign: \"right\"\n  },\n  weatherBar: {\n    textAlign: \"center\"\n  },\n  avgIcon: {\n    width: 80,\n    height: 80\n  },\n  bigIcon: {\n    width: 150,\n    height: 150\n  },\n  smallIcon: {\n    width: 60,\n    height: 60\n  },\n  minMaxTemp: {\n    textAlign: \"right\",\n    fontSize: 30\n  },\n  currentTemp: {\n    fontSize: 35,\n    textAlign: \"center\"\n  },\n  minTemp: {\n    opacity: \"50%\"\n  },\n  avgPressureHumidity: {\n    textAlign: \"center\",\n    fontSize: 23\n  },\n  specificTemperature: {\n    fontSize: 30\n  },\n  avgPressureHumidityValue: {\n    fontSize: 28\n  },\n  dateUnderDay: {\n    fontSize: 20\n  },\n  expandButton: {\n    textAlign: \"center\",\n    marginTop: 22,\n    width: 40,\n    height: 40\n  },\n  foldButton: {\n    float: \"right\",\n    width: 40,\n    height: 40\n  },\n  expandIcon: {\n    fontSize: 30,\n    color: \"#C4C4C4\"\n  },\n  foldIcon: {\n    fontSize: 30,\n    color: \"#C4C4C4\",\n    transform: \"rotate(180deg)\"\n  },\n  unCheckedHour: {\n    cursor: \"pointer\"\n  },\n  checkedHour: {\n    border: \"solid\",\n    borderRadius: 15\n  }\n});\n\nfunction DayWindow({\n  weatherData\n}) {\n  const classes = useStyles();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [avgIcon, setAvgIcon] = useState(null);\n  const [currentWeatherIcon, setcurrentWeatherIcon] = useState(null);\n  const [minTemp, setMinTemp] = useState(\"\");\n  const [maxTemp, setMaxTemp] = useState(\"\");\n  const [avgPressure, setAvgPressure] = useState(\"\");\n  const [avgHumidity, setAvgHumidity] = useState(\"\");\n  const [tempList, setTempList] = useState(null);\n  const [tempIconsList, setTempIconsList] = useState(null);\n  const [buttonIndex, setButtonIndex] = useState(0);\n  const [hoursNumber, setHoursNumber] = useState(null);\n  const [hours, setHours] = useState(null);\n  const [dates, setDates] = useState(null);\n\n  function fetch() {\n    fetchDatesAndHours();\n    setAvgIcon(CloudIcon);\n    setcurrentWeatherIcon(SunIcon);\n    setMinTemp(3 + \"°\");\n    setMaxTemp(12 + \"°\");\n    setAvgPressure(1030 + \"hPa\");\n    setAvgHumidity(60 + \"%\");\n  }\n\n  function fetchDatesAndHours() {\n    let helpHours = [];\n    let helpDates = [];\n    let helpString = [];\n\n    for (let i = 0; i < weatherData.length; i++) {\n      helpString = weatherData[i].dateTime.split(\" \");\n      helpDates.push(helpString[0]);\n      helpHours.push(helpString[1]);\n    }\n\n    setHours(helpHours);\n    setDates(helpDates);\n  }\n\n  function fetchTemperatures() {\n    let _tempList = [10 + \"°\", 11 + \"°\", 13 + \"°\", 14 + \"°\", 12 + \"°\", 11 + \"°\", 10 + \"°\", 9 + \"°\"];\n    let _tempIconsList = [CloudIcon, SunIcon, StormIcon, RainIcon, HailIcon, SnowIcon, FogIcon, HeavyRainIcon];\n    let _tempHoursIndex = [0, 1, 2, 3, 4, 5, 6, 7];\n    setTempList(_tempList);\n    setTempIconsList(_tempIconsList);\n    setHoursNumber(_tempHoursIndex);\n  }\n\n  function handleExpandButton() {\n    if (isExpanded) setIsExpanded(false);else setIsExpanded(true);\n    console.log(isExpanded);\n  }\n\n  function test() {\n    console.log(\"test\");\n  }\n  /*function chooseHourStyle(index) {\r\n    if (index == buttonIndex) return classes.checkedHour;\r\n    else return classes.unCheckedHour;\r\n  }*/\n\n\n  function handleHourClick(index) {\n    setButtonIndex(index);\n  }\n\n  useEffect(() => {\n    fetch();\n    fetchTemperatures();\n  }, []);\n\n  if (isExpanded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      className: classes.topContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      xs: 6,\n      className: classes.leftTopContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.currentTemp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }\n    }, \"Now\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }, \"12\\xB0\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.avgPressureHumidityValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, \"Sunny\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: currentWeatherIcon,\n      className: classes.bigIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      xs: 6,\n      direction: \"column\",\n      className: classes.rightTopContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: classes.foldButton,\n      onClick: handleExpandButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      className: classes.foldIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      className: classes.sectionsAlignment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, \"Pressure:\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.rightTopValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, \"1000hPa\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }, \"Humidity:\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.rightTopValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }\n    }, \"100%\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }, \"Wind:\"), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.rightTopValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, \"10kmph NW\")))), tempList.length == 8 && /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      container: true,\n      className: classes.weatherBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, hoursNumber.map(hoursNumberIndex => hoursNumberIndex == buttonIndex ? /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.checkedHour,\n      key: hoursNumberIndex,\n      onClick: () => handleHourClick(hoursNumberIndex),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tempIconsList[hoursNumberIndex],\n      className: classes.smallIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.specificTemperature,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }\n    }, tempList[hoursNumberIndex]), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, \"21:00\")) : /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: true,\n      className: classes.unCheckedHour,\n      key: hoursNumberIndex,\n      onClick: () => handleHourClick(hoursNumberIndex),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: tempIconsList[hoursNumberIndex],\n      className: classes.smallIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.specificTemperature,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 21\n      }\n    }, tempList[hoursNumberIndex]), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    }, \"21:00\"))))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: avgIcon,\n      className: classes.avgIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      className: classes.minMaxTemp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, maxTemp), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.minTemp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }\n    }, minTemp)), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      className: classes.avgPressureHumidity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 13\n      }\n    }, \"Pressure:\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.avgPressureHumidityValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }\n    }, avgPressure)), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 2,\n      className: classes.avgPressureHumidity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }\n    }, \"Humidity:\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.avgPressureHumidityValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }\n    }, avgHumidity)), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      className: classes.minMaxTemp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }, \"Friday\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: classes.dateUnderDay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 13\n      }\n    }, \"06 November\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      className: classes.expandButton,\n      onClick: handleExpandButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      className: classes.expandIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 15\n      }\n    })))));\n  }\n}\n\nexport default DayWindow;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/components/day-window.jsx"],"names":["React","useState","useEffect","Grid","IconButton","makeStyles","SunIcon","CloudIcon","RainIcon","HailIcon","StormIcon","HeavyRainIcon","CloudsAndSunIcon","FogIcon","SnowIcon","ExpandMoreIcon","Rotate90DegreesCcw","useStyles","container","backgroundColor","color","padding","margin","marginLeft","marginRight","borderRadius","topContainer","marginTop","marginBottom","leftTopContainer","rightTopContainer","fontSize","paddingRight","paddingLeft","borderLeft","borderWidth","sectionsAlignment","rightTopValues","textAlign","weatherBar","avgIcon","width","height","bigIcon","smallIcon","minMaxTemp","currentTemp","minTemp","opacity","avgPressureHumidity","specificTemperature","avgPressureHumidityValue","dateUnderDay","expandButton","foldButton","float","expandIcon","foldIcon","transform","unCheckedHour","cursor","checkedHour","border","DayWindow","weatherData","classes","isExpanded","setIsExpanded","setAvgIcon","currentWeatherIcon","setcurrentWeatherIcon","setMinTemp","maxTemp","setMaxTemp","avgPressure","setAvgPressure","avgHumidity","setAvgHumidity","tempList","setTempList","tempIconsList","setTempIconsList","buttonIndex","setButtonIndex","hoursNumber","setHoursNumber","hours","setHours","dates","setDates","fetch","fetchDatesAndHours","helpHours","helpDates","helpString","i","length","dateTime","split","push","fetchTemperatures","_tempList","_tempIconsList","_tempHoursIndex","handleExpandButton","console","log","test","handleHourClick","index","map","hoursNumberIndex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport SunIcon from \"../assets/images/sun.png\";\r\nimport CloudIcon from \"../assets/images/cloud.png\";\r\nimport RainIcon from \"../assets/images/rain.png\";\r\nimport HailIcon from \"../assets/images/hail.png\";\r\nimport StormIcon from \"../assets/images/storm.png\";\r\nimport HeavyRainIcon from \"../assets/images/heavy-rain.png\";\r\nimport CloudsAndSunIcon from \"../assets/images/clouds-and-sun.png\";\r\nimport FogIcon from \"../assets/images/fog.png\";\r\nimport SnowIcon from \"../assets/images/snow.png\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Rotate90DegreesCcw } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    backgroundColor: \"#273DFF\",\r\n    color: \"#EFEFEF\",\r\n    padding: 10,\r\n    margin: 20,\r\n    marginLeft: 100,\r\n    marginRight: 100,\r\n    borderRadius: 10,\r\n    \"& p\": {\r\n      margin: 1,\r\n    },\r\n  },\r\n  topContainer: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n  leftTopContainer: {\r\n    marginTop: 50,\r\n  },\r\n  rightTopContainer: {\r\n    fontSize: 30,\r\n    paddingRight: 40,\r\n    paddingLeft: 10,\r\n    borderLeft: \"solid\",\r\n    borderWidth: 1,\r\n  },\r\n  sectionsAlignment: {\r\n    marginTop: 17,\r\n  },\r\n  rightTopValues: {\r\n    textAlign: \"right\",\r\n  },\r\n  weatherBar: {\r\n    textAlign: \"center\",\r\n  },\r\n  avgIcon: {\r\n    width: 80,\r\n    height: 80,\r\n  },\r\n  bigIcon: {\r\n    width: 150,\r\n    height: 150,\r\n  },\r\n  smallIcon: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n  minMaxTemp: {\r\n    textAlign: \"right\",\r\n    fontSize: 30,\r\n  },\r\n  currentTemp: {\r\n    fontSize: 35,\r\n    textAlign: \"center\",\r\n  },\r\n  minTemp: {\r\n    opacity: \"50%\",\r\n  },\r\n  avgPressureHumidity: {\r\n    textAlign: \"center\",\r\n    fontSize: 23,\r\n  },\r\n  specificTemperature: {\r\n    fontSize: 30,\r\n  },\r\n  avgPressureHumidityValue: {\r\n    fontSize: 28,\r\n  },\r\n  dateUnderDay: {\r\n    fontSize: 20,\r\n  },\r\n  expandButton: {\r\n    textAlign: \"center\",\r\n    marginTop: 22,\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n  foldButton: {\r\n    float: \"right\",\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n  expandIcon: {\r\n    fontSize: 30,\r\n    color: \"#C4C4C4\",\r\n  },\r\n  foldIcon: {\r\n    fontSize: 30,\r\n    color: \"#C4C4C4\",\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  unCheckedHour: {\r\n    cursor: \"pointer\",\r\n  },\r\n  checkedHour: {\r\n    border: \"solid\",\r\n    borderRadius: 15,\r\n  },\r\n});\r\n\r\nfunction DayWindow({ weatherData }) {\r\n  const classes = useStyles();\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [avgIcon, setAvgIcon] = useState(null);\r\n  const [currentWeatherIcon, setcurrentWeatherIcon] = useState(null);\r\n  const [minTemp, setMinTemp] = useState(\"\");\r\n  const [maxTemp, setMaxTemp] = useState(\"\");\r\n  const [avgPressure, setAvgPressure] = useState(\"\");\r\n  const [avgHumidity, setAvgHumidity] = useState(\"\");\r\n  const [tempList, setTempList] = useState(null);\r\n  const [tempIconsList, setTempIconsList] = useState(null);\r\n  const [buttonIndex, setButtonIndex] = useState(0);\r\n  const [hoursNumber, setHoursNumber] = useState(null);\r\n  const [hours, setHours] = useState(null);\r\n  const [dates, setDates] = useState(null);\r\n\r\n  function fetch() {\r\n    fetchDatesAndHours();\r\n    setAvgIcon(CloudIcon);\r\n    setcurrentWeatherIcon(SunIcon);\r\n    setMinTemp(3 + \"°\");\r\n    setMaxTemp(12 + \"°\");\r\n    setAvgPressure(1030 + \"hPa\");\r\n    setAvgHumidity(60 + \"%\");\r\n  }\r\n\r\n  function fetchDatesAndHours() {\r\n    let helpHours = [];\r\n    let helpDates = [];\r\n    let helpString = [];\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      helpString = weatherData[i].dateTime.split(\" \");\r\n      helpDates.push(helpString[0]);\r\n      helpHours.push(helpString[1]);\r\n    }\r\n    setHours(helpHours);\r\n    setDates(helpDates);\r\n  }\r\n\r\n  function fetchTemperatures() {\r\n    let _tempList = [\r\n      10 + \"°\",\r\n      11 + \"°\",\r\n      13 + \"°\",\r\n      14 + \"°\",\r\n      12 + \"°\",\r\n      11 + \"°\",\r\n      10 + \"°\",\r\n      9 + \"°\",\r\n    ];\r\n    let _tempIconsList = [\r\n      CloudIcon,\r\n      SunIcon,\r\n      StormIcon,\r\n      RainIcon,\r\n      HailIcon,\r\n      SnowIcon,\r\n      FogIcon,\r\n      HeavyRainIcon,\r\n    ];\r\n    let _tempHoursIndex = [0, 1, 2, 3, 4, 5, 6, 7];\r\n    setTempList(_tempList);\r\n    setTempIconsList(_tempIconsList);\r\n    setHoursNumber(_tempHoursIndex);\r\n  }\r\n\r\n  function handleExpandButton() {\r\n    if (isExpanded) setIsExpanded(false);\r\n    else setIsExpanded(true);\r\n    console.log(isExpanded);\r\n  }\r\n\r\n  function test() {\r\n    console.log(\"test\");\r\n  }\r\n\r\n  /*function chooseHourStyle(index) {\r\n    if (index == buttonIndex) return classes.checkedHour;\r\n    else return classes.unCheckedHour;\r\n  }*/\r\n\r\n  function handleHourClick(index) {\r\n    setButtonIndex(index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n    fetchTemperatures();\r\n  }, []);\r\n\r\n  if (isExpanded) {\r\n    return (\r\n      <div className={classes.container}>\r\n        <Grid container direction='column' spacing={2}>\r\n          <Grid item container className={classes.topContainer}>\r\n            <Grid item container xs={6} className={classes.leftTopContainer}>\r\n              <Grid item xs className={classes.currentTemp}>\r\n                <p>Now</p>\r\n                <p>12°</p>\r\n                <p className={classes.avgPressureHumidityValue}>Sunny</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={currentWeatherIcon} className={classes.bigIcon} />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              xs={6}\r\n              direction='column'\r\n              className={classes.rightTopContainer}\r\n            >\r\n              <Grid item>\r\n                <IconButton\r\n                  className={classes.foldButton}\r\n                  onClick={handleExpandButton}\r\n                >\r\n                  <ExpandMoreIcon className={classes.foldIcon} />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid item container className={classes.sectionsAlignment}>\r\n                <Grid item xs>\r\n                  Pressure:\r\n                </Grid>\r\n                <Grid item xs className={classes.rightTopValues}>\r\n                  1000hPa\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item container>\r\n                <Grid item xs>\r\n                  Humidity:\r\n                </Grid>\r\n                <Grid item xs className={classes.rightTopValues}>\r\n                  100%\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item container>\r\n                <Grid item xs>\r\n                  Wind:\r\n                </Grid>\r\n                <Grid item xs className={classes.rightTopValues}>\r\n                  10kmph NW\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          {tempList.length == 8 && (\r\n            <Grid item container className={classes.weatherBar}>\r\n              {/*<Grid item xs>\r\n                <img src={tempIconsList[0]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[0]}</p>\r\n                <p>00:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[1]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[1]}</p>\r\n                <p>03:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[2]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[2]}</p>\r\n                <p>06:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[3]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[3]}</p>\r\n                <p>09:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[4]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[4]}</p>\r\n                <p>12:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[5]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[5]}</p>\r\n                <p>15:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[6]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[6]}</p>\r\n                <p>18:00</p>\r\n              </Grid>\r\n              <Grid item xs>\r\n                <img src={tempIconsList[7]} className={classes.smallIcon} />\r\n                <p className={classes.specificTemperature}>{tempList[7]}</p>\r\n                <p>21:00</p>\r\n              </Grid>*/}\r\n              {hoursNumber.map(hoursNumberIndex =>\r\n                hoursNumberIndex == buttonIndex ? (\r\n                  <Grid\r\n                    item\r\n                    xs\r\n                    className={classes.checkedHour}\r\n                    key={hoursNumberIndex}\r\n                    onClick={() => handleHourClick(hoursNumberIndex)}\r\n                  >\r\n                    <img\r\n                      src={tempIconsList[hoursNumberIndex]}\r\n                      className={classes.smallIcon}\r\n                    />\r\n                    <p className={classes.specificTemperature}>\r\n                      {tempList[hoursNumberIndex]}\r\n                    </p>\r\n                    <p>21:00</p>\r\n                  </Grid>\r\n                ) : (\r\n                  <Grid\r\n                    item\r\n                    xs\r\n                    className={classes.unCheckedHour}\r\n                    key={hoursNumberIndex}\r\n                    onClick={() => handleHourClick(hoursNumberIndex)}\r\n                  >\r\n                    <img\r\n                      src={tempIconsList[hoursNumberIndex]}\r\n                      className={classes.smallIcon}\r\n                    />\r\n                    <p className={classes.specificTemperature}>\r\n                      {tempList[hoursNumberIndex]}\r\n                    </p>\r\n                    <p>21:00</p>\r\n                  </Grid>\r\n                )\r\n              )}\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className={classes.container}>\r\n        <Grid container spacing={6}>\r\n          <Grid item xs={2}>\r\n            <img src={avgIcon} className={classes.avgIcon} />\r\n          </Grid>\r\n          <Grid item xs={1} className={classes.minMaxTemp}>\r\n            <p>{maxTemp}</p>\r\n            <p className={classes.minTemp}>{minTemp}</p>\r\n          </Grid>\r\n          <Grid item xs={3} className={classes.avgPressureHumidity}>\r\n            <p>Pressure:</p>\r\n            <p className={classes.avgPressureHumidityValue}>{avgPressure}</p>\r\n          </Grid>\r\n          <Grid item xs={2} className={classes.avgPressureHumidity}>\r\n            <p>Humidity:</p>\r\n            <p className={classes.avgPressureHumidityValue}>{avgHumidity}</p>\r\n          </Grid>\r\n          <Grid item xs={3} className={classes.minMaxTemp}>\r\n            <p>Friday</p>\r\n            <p className={classes.dateUnderDay}>06 November</p>\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <IconButton\r\n              className={classes.expandButton}\r\n              onClick={handleExpandButton}\r\n            >\r\n              <ExpandMoreIcon className={classes.expandIcon} />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DayWindow;\r\n"]},"metadata":{},"sourceType":"module"}