{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krzysztof\\\\Documents\\\\Github\\\\weather-forecast\\\\src\\\\pages\\\\mainweather.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Clock from \"../components/clock\";\nimport logoBig from \"../assets/images/logo.png\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DayWindow from \"../components/day-window\";\nconst useStyles = makeStyles(theme => ({\n  contentContainer: {\n    margin: 30,\n    marginTop: 10\n  },\n  topBar: {\n    //margin: \"auto\",\n    display: \"flex\"\n  },\n  logoTop: {},\n  cityDisplay: {\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  }\n}));\nconst logo = {\n  src: logoBig,\n  alt: \"logo\",\n  width: \"80%\",\n  height: \"90%\"\n};\n\nfunction MainWeather({\n  weatherData,\n  cityData\n}) {\n  const classes = useStyles();\n  const [dayWindows, setDayWindows] = useState(null);\n  const [weatherArray, setWeatherArray] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  function fetch() {\n    console.log(weatherData);\n    console.log(cityData);\n    const dayWindowsArray = [0, 1, 2, 3, 4];\n    setDayWindows(dayWindowsArray);\n    fetchWeatherArray();\n  }\n\n  function fetchWeatherArray() {\n    let helpArray = [];\n\n    for (var i; i < weatherData.lenght; i++) {\n      helpArray.push(weatherData[i]);\n      console.log(weatherData[i]);\n    }\n\n    setWeatherArray(helpArray);\n  }\n\n  useEffect(() => {\n    if (weatherArray) {\n      setDataLoaded(true);\n    }\n  }, [weatherArray]);\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  if (dataLoaded) {\n    console.log(weatherArray);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.contentContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.topBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      direction: \"row\",\n      justify: \"space-around\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo.src,\n      alt: logo.alt,\n      width: logo.width,\n      height: logo.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      className: classes.cityDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, \"Weather for: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 30\n      }\n    }), \" \", cityData.cityName + \", \" + cityData.countryCode)), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Clock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    })))), dayWindows && dayWindows.map(dayWindow => /*#__PURE__*/React.createElement(DayWindow, {\n      key: dayWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 39\n      }\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n}\n\nexport default MainWeather;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/Github/weather-forecast/src/pages/mainweather.jsx"],"names":["React","useState","useEffect","makeStyles","Clock","logoBig","Typography","Grid","DayWindow","useStyles","theme","contentContainer","margin","marginTop","topBar","display","logoTop","cityDisplay","textAlign","fontWeight","logo","src","alt","width","height","MainWeather","weatherData","cityData","classes","dayWindows","setDayWindows","weatherArray","setWeatherArray","dataLoaded","setDataLoaded","fetch","console","log","dayWindowsArray","fetchWeatherArray","helpArray","i","lenght","push","cityName","countryCode","map","dayWindow"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Clock from \"../components/clock\";\r\nimport logoBig from \"../assets/images/logo.png\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DayWindow from \"../components/day-window\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  contentContainer: {\r\n    margin: 30,\r\n    marginTop: 10,\r\n  },\r\n  topBar: {\r\n    //margin: \"auto\",\r\n    display: \"flex\",\r\n  },\r\n  logoTop: {},\r\n  cityDisplay: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst logo = {\r\n  src: logoBig,\r\n  alt: \"logo\",\r\n  width: \"80%\",\r\n  height: \"90%\",\r\n};\r\n\r\nfunction MainWeather({ weatherData, cityData }) {\r\n  const classes = useStyles();\r\n  const [dayWindows, setDayWindows] = useState(null);\r\n  const [weatherArray, setWeatherArray] = useState(null);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  function fetch() {\r\n    console.log(weatherData);\r\n    console.log(cityData);\r\n    const dayWindowsArray = [0, 1, 2, 3, 4];\r\n    setDayWindows(dayWindowsArray);\r\n    fetchWeatherArray();\r\n  }\r\n\r\n  function fetchWeatherArray() {\r\n    let helpArray = [];\r\n    for (var i; i < weatherData.lenght; i++) {\r\n      helpArray.push(weatherData[i]);\r\n      console.log(weatherData[i]);\r\n    }\r\n    setWeatherArray(helpArray);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (weatherArray) {\r\n      setDataLoaded(true);\r\n    }\r\n  }, [weatherArray]);\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n  }, []);\r\n\r\n  if (dataLoaded) {\r\n    console.log(weatherArray);\r\n    return (\r\n      <div className={classes.contentContainer}>\r\n        <div className={classes.topBar}>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            direction='row'\r\n            justify={\"space-around\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Grid item>\r\n              <img\r\n                src={logo.src}\r\n                alt={logo.alt}\r\n                width={logo.width}\r\n                height={logo.height}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant='h5' className={classes.cityDisplay}>\r\n                Weather for: <br />{\" \"}\r\n                {cityData.cityName + \", \" + cityData.countryCode}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Clock />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        {dayWindows &&\r\n          dayWindows.map(dayWindow => <DayWindow key={dayWindow} />)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n}\r\n\r\nexport default MainWeather;\r\n"]},"metadata":{},"sourceType":"module"}