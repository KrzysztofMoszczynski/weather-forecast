{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krzysztof\\\\Documents\\\\GitHub\\\\weather-forecast\\\\src\\\\pages\\\\home.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles, Typography } from \"@material-ui/core\";\nimport logoBig from \"../assets/images/logo.png\";\nimport CityFinder from \"../components/city-finder\";\nimport database from \"../api/openWeatherMap\";\nconst useStyles = makeStyles(theme => ({\n  pageStyle: {\n    textAlign: \"center\",\n    marginTop: \"50px\"\n  },\n  typeCityText: {\n    marginBottom: 30\n  },\n  noCityMessage: {\n    color: \"#FF0000\",\n    fontSize: 15\n  }\n}));\nconst logo = {\n  src: logoBig,\n  alt: \"logo\",\n  width: \"20%\",\n  height: \"20%\"\n};\n\nfunction Home() {\n  const classes = useStyles();\n  const [cityNotFound, setCityNotFound] = useState(true);\n  const [cityName, setCityName] = useState(\"\");\n  const [cityData, setCityData] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n\n  function handleSearch(cityName) {\n    setCityNotFound(!cityNotFound);\n    setCityName(cityName);\n    console.log(cityName);\n    fetchWeather();\n    console.log(cityData);\n    console.log(weatherData);\n  }\n\n  async function fetchWeather() {\n    const weather = await database.getWeatherByCityName(cityName);\n    console.log(weather);\n\n    if (weather == false) {\n      setCityNotFound(true);\n    } else {\n      setCityData(weather[0]);\n      setWeatherData(weather[1]);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.pageStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo.src,\n    alt: logo.alt,\n    width: logo.width,\n    height: logo.height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    className: classes.typeCityText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Type the city you want to check the weather for:\"), /*#__PURE__*/React.createElement(CityFinder, {\n    handleSearch: handleSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), cityNotFound && /*#__PURE__*/React.createElement(Link, {\n    to: \"/mainweather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 24\n    }\n  }, \"Dowiedz si\\u0119 wi\\u0119cej\"), cityNotFound && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noCityMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Ooops... it seems like we don't have your city in database.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"Try another city or check if there is no typo.\")));\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/pages/home.jsx"],"names":["React","useState","useEffect","Link","makeStyles","Typography","logoBig","CityFinder","database","useStyles","theme","pageStyle","textAlign","marginTop","typeCityText","marginBottom","noCityMessage","color","fontSize","logo","src","alt","width","height","Home","classes","cityNotFound","setCityNotFound","cityName","setCityName","cityData","setCityData","weatherData","setWeatherData","handleSearch","console","log","fetchWeather","weather","getWeatherByCityName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport logoBig from \"../assets/images/logo.png\";\r\nimport CityFinder from \"../components/city-finder\";\r\nimport database from \"../api/openWeatherMap\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  pageStyle: {\r\n    textAlign: \"center\",\r\n    marginTop: \"50px\",\r\n  },\r\n  typeCityText: {\r\n    marginBottom: 30,\r\n  },\r\n  noCityMessage: {\r\n    color: \"#FF0000\",\r\n    fontSize: 15,\r\n  },\r\n}));\r\n\r\nconst logo = {\r\n  src: logoBig,\r\n  alt: \"logo\",\r\n  width: \"20%\",\r\n  height: \"20%\",\r\n};\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const [cityNotFound, setCityNotFound] = useState(true);\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const [cityData, setCityData] = useState(null);\r\n  const [weatherData, setWeatherData] = useState(null);\r\n\r\n  function handleSearch(cityName) {\r\n    setCityNotFound(!cityNotFound);\r\n    setCityName(cityName);\r\n    console.log(cityName);\r\n    fetchWeather();\r\n    console.log(cityData);\r\n    console.log(weatherData);\r\n  }\r\n\r\n  async function fetchWeather() {\r\n    const weather = await database.getWeatherByCityName(cityName);\r\n    console.log(weather);\r\n    if (weather == false) {\r\n      setCityNotFound(true);\r\n    } else {\r\n      setCityData(weather[0]);\r\n      setWeatherData(weather[1]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.pageStyle}>\r\n      <img\r\n        src={logo.src}\r\n        alt={logo.alt}\r\n        width={logo.width}\r\n        height={logo.height}\r\n      />\r\n      <Typography variant='h5' className={classes.typeCityText}>\r\n        Type the city you want to check the weather for:\r\n      </Typography>\r\n      <CityFinder handleSearch={handleSearch} />\r\n      {cityNotFound && <Link to='/mainweather'>Dowiedz się więcej</Link>}\r\n      {cityNotFound && (\r\n        <div className={classes.noCityMessage}>\r\n          <p>Ooops... it seems like we don't have your city in database.</p>\r\n          <p>Try another city or check if there is no typo.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}