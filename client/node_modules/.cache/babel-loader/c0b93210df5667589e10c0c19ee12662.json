{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krzysztof\\\\Documents\\\\GitHub\\\\weather-forecast\\\\src\\\\pages\\\\mainweather.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Clock from \"../components/clock\";\nimport logoBig from \"../assets/images/logo.png\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DayWindow from \"../components/day-window\";\nimport ChooseCityButton from \"../components/choose-city-button\";\nconst useStyles = makeStyles(() => ({\n  contentContainer: {\n    margin: 30,\n    marginTop: 10\n  },\n  topBar: {\n    //margin: \"auto\",\n    display: \"flex\"\n  },\n  logoTop: {},\n  cityDisplay: {\n    textAlign: \"center\",\n    fontWeight: \"bold\"\n  }\n}));\nconst logo = {\n  src: logoBig,\n  alt: \"logo\",\n  width: \"80%\",\n  height: \"90%\"\n};\n\nconst MainWeather = ({\n  weatherData,\n  cityData\n}) => {\n  const classes = useStyles(); //const [dayWindows, setDayWindows] = useState(null);\n\n  const [weatherArray, setWeatherArray] = useState(null);\n  const [dataLoaded, setDataLoaded] = useState(false);\n\n  function fetch() {\n    //const dayWindowsArray = [0, 1, 2, 3, 4];\n    //setDayWindows(dayWindowsArray);\n    fetchWeatherArray();\n  }\n\n  function fetchWeatherArray() {\n    let helpArray = [];\n\n    for (let i = 0; i < weatherData.length; i++) {\n      if (i % 8 == 0) helpArray.push([]);\n      helpArray[parseInt(i / 8, 10)].push(weatherData[i]);\n    }\n\n    setWeatherArray(helpArray);\n  }\n\n  useEffect(() => {\n    if (weatherArray) {\n      console.log(weatherArray);\n      setDataLoaded(true);\n    }\n  }, [weatherArray]);\n  useEffect(() => {\n    fetch();\n  }, []);\n\n  if (dataLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.contentContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.topBar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      direction: \"row\",\n      justify: \"space-around\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo.src,\n      alt: logo.alt,\n      width: logo.width,\n      height: logo.height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChooseCityButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      className: classes.cityDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, \"Weather for: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 30\n      }\n    }), \" \", cityData.cityName + \", \" + cityData.countryCode)), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Clock, {\n      timezone: cityData.timezone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    })))), weatherArray && weatherArray.map((weatherArrayItem, index) => /*#__PURE__*/React.createElement(DayWindow, {\n      key: index,\n      weatherData: weatherArrayItem,\n      timezone: cityData.timezone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n};\n\nexport default MainWeather;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/pages/mainweather.jsx"],"names":["React","useState","useEffect","makeStyles","Clock","logoBig","Typography","Grid","DayWindow","ChooseCityButton","useStyles","contentContainer","margin","marginTop","topBar","display","logoTop","cityDisplay","textAlign","fontWeight","logo","src","alt","width","height","MainWeather","weatherData","cityData","classes","weatherArray","setWeatherArray","dataLoaded","setDataLoaded","fetch","fetchWeatherArray","helpArray","i","length","push","parseInt","console","log","cityName","countryCode","timezone","map","weatherArrayItem","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Clock from \"../components/clock\";\r\nimport logoBig from \"../assets/images/logo.png\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DayWindow from \"../components/day-window\";\r\nimport ChooseCityButton from \"../components/choose-city-button\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  contentContainer: {\r\n    margin: 30,\r\n    marginTop: 10,\r\n  },\r\n  topBar: {\r\n    //margin: \"auto\",\r\n    display: \"flex\",\r\n  },\r\n  logoTop: {},\r\n  cityDisplay: {\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst logo = {\r\n  src: logoBig,\r\n  alt: \"logo\",\r\n  width: \"80%\",\r\n  height: \"90%\",\r\n};\r\n\r\nconst MainWeather = ({ weatherData, cityData }) => {\r\n  const classes = useStyles();\r\n  //const [dayWindows, setDayWindows] = useState(null);\r\n  const [weatherArray, setWeatherArray] = useState(null);\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n\r\n  function fetch() {\r\n    //const dayWindowsArray = [0, 1, 2, 3, 4];\r\n    //setDayWindows(dayWindowsArray);\r\n    fetchWeatherArray();\r\n  }\r\n\r\n  function fetchWeatherArray() {\r\n    let helpArray = [];\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      if (i % 8 == 0) helpArray.push([]);\r\n      helpArray[parseInt(i / 8, 10)].push(weatherData[i]);\r\n    }\r\n    setWeatherArray(helpArray);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (weatherArray) {\r\n      console.log(weatherArray);\r\n      setDataLoaded(true);\r\n    }\r\n  }, [weatherArray]);\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n  }, []);\r\n\r\n  if (dataLoaded) {\r\n    return (\r\n      <div className={classes.contentContainer}>\r\n        <div className={classes.topBar}>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            direction='row'\r\n            justify={\"space-around\"}\r\n            alignItems={\"center\"}\r\n          >\r\n            <Grid item>\r\n              <img\r\n                src={logo.src}\r\n                alt={logo.alt}\r\n                width={logo.width}\r\n                height={logo.height}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <ChooseCityButton />\r\n              <Typography variant='h5' className={classes.cityDisplay}>\r\n                Weather for: <br />{\" \"}\r\n                {cityData.cityName + \", \" + cityData.countryCode}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Clock timezone={cityData.timezone} />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        {weatherArray &&\r\n          weatherArray.map((weatherArrayItem, index) => (\r\n            <DayWindow\r\n              key={index}\r\n              weatherData={weatherArrayItem}\r\n              timezone={cityData.timezone}\r\n            />\r\n          ))}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\n\r\nexport default MainWeather;\r\n"]},"metadata":{},"sourceType":"module"}