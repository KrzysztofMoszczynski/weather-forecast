{"ast":null,"code":"import axios from \"axios\";\nconst apiKey = \"f14f6a8afb9f48fa4104b86989623adf\";\nconst database = {\n  async getWeatherByCityName(city) {\n    const createWeatherList = (dateTime, temperature, weatherMain, weatherDescription, pressure, humidity, windSpeed) => ({\n      dateTime,\n      temperature,\n      weatherMain,\n      weatherDescription,\n      pressure,\n      humidity,\n      windSpeed\n    });\n\n    const weatherList = [];\n    let cityData = {};\n\n    try {\n      const response = await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n        params: {\n          q: city,\n          appid: apiKey\n        }\n      });\n      cityData = {\n        cityName: response.data.city.name,\n        cityId: response.data.city.id,\n        countryCode: response.data.city.country,\n        timezone: response.data.city.timezone\n      };\n      console.log(response);\n      weatherList.push(...response.data.list.map(listElement => createWeatherList(listElement.dt_txt, listElement.main.temp, listElement.weather[0].main, listElement.weather[0].description, listElement.main.pressure, listElement.main.humidity, listElement.wind.speed)));\n      return [cityData, weatherList];\n    } catch (error) {\n      console.log(error);\n      return false;\n    } //const weatherArray = await api.openweathermap.org/data/2.5/forecast?q={Warsaw}&appid={apiKey};\n\n  },\n\n  async getStatisticalData(city, month, day) {\n    const statisticalData = {};\n\n    try {\n      let cityData;\n      let statisticalData;\n      const responseID = await axios.get(\"https://api.openweathermap.org/data/2.5/forecast\", {\n        params: {\n          q: city,\n          appid: apiKey\n        }\n      });\n      cityData = {\n        id: responseID.data.city.id,\n        name: responseID.data.city.name,\n        country: responseID.data.city.country\n      };\n      const response = await axios.get(\"https://history.openweathermap.org/data/2.5/aggregated/day\", {\n        params: {\n          id: cityData.id,\n          month: month,\n          day: day,\n          appid: apiKey\n        }\n      });\n      statisticalData = {\n        avgPressure: response.data.result.pressure.mean,\n        avgHumidity: response.data.result.humidity.mean,\n        avgWind: response.data.result.wind.mean,\n        avgPrecipitation: response.data.result.precipitation.mean,\n        temperature: {\n          avg: response.data.result.temp.mean,\n          avgMax: response.data.result.temp.average_max,\n          avgMin: response.data.result.temp.average_min\n        }\n      };\n      console.log(statisticalData);\n      console.log(cityData);\n      return [cityData, statisticalData];\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  }\n\n};\nexport default database;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/api/openWeatherMap.js"],"names":["axios","apiKey","database","getWeatherByCityName","city","createWeatherList","dateTime","temperature","weatherMain","weatherDescription","pressure","humidity","windSpeed","weatherList","cityData","response","get","params","q","appid","cityName","data","name","cityId","id","countryCode","country","timezone","console","log","push","list","map","listElement","dt_txt","main","temp","weather","description","wind","speed","error","getStatisticalData","month","day","statisticalData","responseID","avgPressure","result","mean","avgHumidity","avgWind","avgPrecipitation","precipitation","avg","avgMax","average_max","avgMin","average_min"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiKey = \"f14f6a8afb9f48fa4104b86989623adf\";\r\n\r\nconst database = {\r\n  async getWeatherByCityName(city) {\r\n    const createWeatherList = (\r\n      dateTime,\r\n      temperature,\r\n      weatherMain,\r\n      weatherDescription,\r\n      pressure,\r\n      humidity,\r\n      windSpeed\r\n    ) => ({\r\n      dateTime,\r\n      temperature,\r\n      weatherMain,\r\n      weatherDescription,\r\n      pressure,\r\n      humidity,\r\n      windSpeed,\r\n    });\r\n\r\n    const weatherList = [];\r\n    let cityData = {};\r\n    try {\r\n      const response = await axios.get(\r\n        \"https://api.openweathermap.org/data/2.5/forecast\",\r\n        { params: { q: city, appid: apiKey } }\r\n      );\r\n\r\n      cityData = {\r\n        cityName: response.data.city.name,\r\n        cityId: response.data.city.id,\r\n        countryCode: response.data.city.country,\r\n        timezone: response.data.city.timezone,\r\n      };\r\n      console.log(response);\r\n      weatherList.push(\r\n        ...response.data.list.map(listElement =>\r\n          createWeatherList(\r\n            listElement.dt_txt,\r\n            listElement.main.temp,\r\n            listElement.weather[0].main,\r\n            listElement.weather[0].description,\r\n            listElement.main.pressure,\r\n            listElement.main.humidity,\r\n            listElement.wind.speed\r\n          )\r\n        )\r\n      );\r\n      return [cityData, weatherList];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n    //const weatherArray = await api.openweathermap.org/data/2.5/forecast?q={Warsaw}&appid={apiKey};\r\n  },\r\n  async getStatisticalData(city, month, day) {\r\n    const statisticalData = {};\r\n    try {\r\n      let cityData;\r\n      let statisticalData;\r\n      const responseID = await axios.get(\r\n        \"https://api.openweathermap.org/data/2.5/forecast\",\r\n        { params: { q: city, appid: apiKey } }\r\n      );\r\n      cityData = {\r\n        id: responseID.data.city.id,\r\n        name: responseID.data.city.name,\r\n        country: responseID.data.city.country,\r\n      };\r\n      const response = await axios.get(\r\n        \"https://history.openweathermap.org/data/2.5/aggregated/day\",\r\n        { params: { id: cityData.id, month: month, day: day, appid: apiKey } }\r\n      );\r\n      statisticalData = {\r\n        avgPressure: response.data.result.pressure.mean,\r\n        avgHumidity: response.data.result.humidity.mean,\r\n        avgWind: response.data.result.wind.mean,\r\n        avgPrecipitation: response.data.result.precipitation.mean,\r\n        temperature: {\r\n          avg: response.data.result.temp.mean,\r\n          avgMax: response.data.result.temp.average_max,\r\n          avgMin: response.data.result.temp.average_min,\r\n        },\r\n      };\r\n      console.log(statisticalData);\r\n      console.log(cityData);\r\n      return [cityData, statisticalData];\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n  },\r\n};\r\n\r\nexport default database;\r\n"]},"metadata":{},"sourceType":"module"}