{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Krzysztof\\\\Documents\\\\GitHub\\\\weather-forecast\\\\src\\\\components\\\\day-window.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core\";\nimport SunIcon from \"../assets/images/sun.png\";\nimport CloudIcon from \"../assets/images/cloud.png\";\nimport RainIcon from \"../assets/images/rain.png\";\nimport HailIcon from \"../assets/images/hail.png\";\nimport StormIcon from \"../assets/images/storm.png\";\nimport HeavyRainIcon from \"../assets/images/heavy-rain.png\";\nimport CloudsAndSunIcon from \"../assets/images/clouds-and-sun.png\";\nimport FogIcon from \"../assets/images/fog.png\";\nimport SnowIcon from \"../assets/images/snow.png\";\nimport CloudsAndMoonIcon from \"../assets/images/clouds-and-moon.png\";\nimport MoonIcon from \"../assets/images/moon.png\";\nimport TornadoIcon from \"../assets/images/tornado.png\";\nimport NoPhotoIcon from \"../assets/images/no-photo.png\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { Rotate90DegreesCcw } from \"@material-ui/icons\";\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: \"#273DFF\",\n    color: \"#EFEFEF\",\n    padding: 10,\n    margin: 20,\n    marginLeft: 100,\n    marginRight: 100,\n    borderRadius: 10,\n    \"& p\": {\n      margin: 1\n    }\n  },\n  topContainer: {\n    marginTop: 10,\n    marginBottom: 20\n  },\n  leftTopContainer: {\n    marginTop: 50\n  },\n  rightTopContainer: {\n    fontSize: 30,\n    paddingRight: 40,\n    paddingLeft: 10,\n    borderLeft: \"solid\",\n    borderWidth: 1\n  },\n  sectionsAlignment: {\n    marginTop: 17\n  },\n  rightTopValues: {\n    textAlign: \"right\"\n  },\n  weatherBar: {\n    textAlign: \"center\"\n  },\n  avgIcon: {\n    width: 80,\n    height: 80\n  },\n  bigIcon: {\n    width: 150,\n    height: 150\n  },\n  smallIcon: {\n    width: 60,\n    height: 60\n  },\n  minMaxTemp: {\n    textAlign: \"right\",\n    fontSize: 30\n  },\n  currentTemp: {\n    fontSize: 35,\n    textAlign: \"center\"\n  },\n  minTemp: {\n    opacity: \"50%\"\n  },\n  avgPressureHumidity: {\n    textAlign: \"center\",\n    fontSize: 23\n  },\n  specificTemperature: {\n    fontSize: 30\n  },\n  avgPressureHumidityValue: {\n    fontSize: 28\n  },\n  dateUnderDay: {\n    fontSize: 20\n  },\n  expandButton: {\n    textAlign: \"center\",\n    marginTop: 22,\n    width: 40,\n    height: 40\n  },\n  foldButton: {\n    float: \"right\",\n    width: 40,\n    height: 40\n  },\n  expandIcon: {\n    fontSize: 30,\n    color: \"#C4C4C4\"\n  },\n  foldIcon: {\n    fontSize: 30,\n    color: \"#C4C4C4\",\n    transform: \"rotate(180deg)\"\n  },\n  unCheckedHour: {\n    cursor: \"pointer\"\n  },\n  checkedHour: {\n    border: \"solid\",\n    borderRadius: 15\n  }\n});\n\nfunction DayWindow({\n  weatherData,\n  timezone\n}) {\n  const classes = useStyles();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [avgIcon, setAvgIcon] = useState(null);\n  const [minTemp, setMinTemp] = useState(\"\");\n  const [maxTemp, setMaxTemp] = useState(\"\");\n  const [avgPressure, setAvgPressure] = useState(\"\");\n  const [avgHumidity, setAvgHumidity] = useState(\"\");\n  const [tempList, setTempList] = useState(null);\n  const [iconsList, setIconsList] = useState(null);\n  const [buttonIndex, setButtonIndex] = useState(0);\n  const [hours, setHours] = useState(null);\n  const [dates, setDates] = useState(null);\n  const [pressureList, setPressureList] = useState(null);\n  const [humidityList, setHumidityList] = useState(null);\n\n  function fetch() {\n    console.log(weatherData);\n    fetchPressure();\n    fetchHumidity();\n    fetchDatesAndHours();\n    fetchTemperatures();\n  }\n\n  function fetchPressure() {\n    let helpPressure = [];\n    let sum = 0;\n\n    for (let i = 0; i < weatherData.length; i++) {\n      helpPressure.push(weatherData[i].pressure);\n      sum += weatherData[i].pressure;\n    }\n\n    let avgPressure = parseInt(sum / weatherData.length);\n    setAvgPressure(avgPressure);\n    setPressureList(helpPressure);\n  }\n\n  function fetchHumidity() {\n    let helpHumidity = [];\n    let sum = 0;\n\n    for (let i = 0; i < weatherData.length; i++) {\n      helpHumidity.push(weatherData[i].humidity);\n      sum += weatherData[i].humidity;\n    }\n\n    let avgHumidity = parseInt(sum / weatherData.length);\n    setAvgHumidity(avgHumidity);\n    setHumidityList(helpHumidity);\n  }\n\n  function fetchDatesAndHours() {\n    let helpHours = [];\n    let helpDates = [];\n    let helpString = [];\n    let dateToFormat;\n    let hourToFormat;\n\n    for (let i = 0; i < weatherData.length; i++) {\n      helpString = weatherData[i].dateTime.split(\" \");\n      dateToFormat = new Date(Date.parse(helpString[0]));\n      console.log(dateToFormat.getTime());\n      let localOffset = dateToFormat.getTimezoneOffset();\n      dateToFormat.setTime(dateToFormat.getTime() + localOffset * 60 * 1000 + timezone * 1000);\n      dateToFormat = dateToFormat.toDateString().split(\" \");\n      helpDates.push({\n        dayOfWeek: dateToFormat[0],\n        month: dateToFormat[1],\n        day: dateToFormat[2]\n      });\n      hourToFormat = helpString[1].substring(0, helpString[1].length - 3);\n      helpHours.push(hourToFormat);\n    }\n\n    setHours(helpHours);\n    setDates(helpDates);\n    fetchIcons(helpHours);\n  }\n\n  function fetchTemperatures() {\n    let tempList = [];\n    let helpTemp;\n    let maxTemp = -100;\n    let minTemp = 100;\n\n    for (let i = 0; i < weatherData.length; i++) {\n      helpTemp = Math.round(weatherData[i].temperature - 273.15);\n      if (helpTemp > maxTemp) maxTemp = helpTemp;\n      if (helpTemp < minTemp) minTemp = helpTemp;\n      helpTemp += \"°C\";\n      tempList.push(helpTemp);\n    }\n\n    minTemp += \"°C\";\n    maxTemp += \"°C\";\n    setMinTemp(minTemp);\n    setMaxTemp(maxTemp);\n    setTempList(tempList);\n  }\n\n  function fetchIcons(helpHours) {\n    let helpIconArray = [];\n    let weatherMain;\n    let weatherDescription;\n    let helpHour;\n\n    for (let i = 0; i < weatherData.length; i++) {\n      weatherMain = weatherData[i].weatherMain;\n      weatherDescription = weatherData[i].weatherDescription;\n      helpHour = parseInt(helpHours[i].substring(0, 2));\n\n      if (weatherMain == \"Clear\") {\n        if (helpHour >= 6 && helpHour <= 20) {\n          helpIconArray.push(SunIcon);\n        } else {\n          helpIconArray.push(MoonIcon);\n        }\n      } else if ([\"broken clouds\", \"scattered clouds\", \"few clouds\"].includes(weatherDescription)) {\n        if (helpHour >= 6 && helpHour <= 20) {\n          helpIconArray.push(CloudsAndSunIcon);\n        } else {\n          helpIconArray.push(CloudsAndMoonIcon);\n        }\n      } else if (weatherDescription == \"overcast clouds\") {\n        helpIconArray.push(CloudIcon);\n      } else if ([\"Rain\", \"Drizzle\"].includes(weatherMain)) {\n        if ([\"light rain\", \"moderate rain\", \"freezing rain\", \"light intensity shower rain\"].includes(weatherDescription) || weatherMain == \"Drizzle\") {\n          helpIconArray.push(RainIcon);\n        } else {\n          helpIconArray.push(HeavyRainIcon);\n        }\n      } else if (weatherMain == \"Thunderstorm\") {\n        helpIconArray.push(StormIcon);\n      } else if (weatherMain == \"Snow\") {\n        helpIconArray.push(SnowIcon);\n      } else if ([\"Mist\", \"Fog\", \"Haze\"].includes(weatherMain)) {\n        helpIconArray.push(FogIcon);\n      } else if (weatherMain == \"Tornado\") {\n        helpIconArray.push(TornadoIcon);\n      } else {\n        helpIconArray.push(NoPhotoIcon);\n      }\n    }\n\n    let avgIcon = mode(helpIconArray);\n    setAvgIcon(avgIcon);\n    setIconsList(helpIconArray);\n  }\n\n  function mode(array) {\n    if (array.length == 0) return null;\n    var modeMap = {};\n    var maxEl = array[0],\n        maxCount = 1;\n\n    for (var i = 0; i < array.length; i++) {\n      if (array[i] == MoonIcon || array[i] == CloudsAndMoonIcon) continue;\n      var el = array[i];\n      if (modeMap[el] == null) modeMap[el] = 1;else modeMap[el]++;\n\n      if (modeMap[el] > maxCount) {\n        maxEl = el;\n        maxCount = modeMap[el];\n      }\n    }\n\n    return maxEl;\n  }\n\n  function handleExpandButton() {\n    if (isExpanded) setIsExpanded(false);else setIsExpanded(true);\n    console.log(isExpanded);\n  }\n\n  function handleHourClick(index) {\n    setButtonIndex(index);\n  }\n\n  useEffect(() => {\n    fetch(); //fetchTemperatures();\n  }, []);\n\n  if (iconsList && tempList && hours) {\n    console.log(iconsList);\n    console.log(hours);\n    console.log(tempList);\n\n    if (isExpanded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        direction: \"column\",\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        className: classes.topContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        xs: 6,\n        className: classes.leftTopContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.currentTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 19\n        }\n      }, hours[buttonIndex]), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 19\n        }\n      }, tempList[buttonIndex]), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.avgPressureHumidityValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 19\n        }\n      }, weatherData[buttonIndex].weatherDescription)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: iconsList[buttonIndex],\n        className: classes.bigIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        xs: 6,\n        direction: \"column\",\n        className: classes.rightTopContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        className: classes.foldButton,\n        onClick: handleExpandButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n        className: classes.foldIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }\n      }))), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        className: classes.sectionsAlignment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 19\n        }\n      }, \"Pressure:\"), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.rightTopValues,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 19\n        }\n      }, pressureList[buttonIndex] + \"  \", \"hPa\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 19\n        }\n      }, \"Humidity:\"), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.rightTopValues,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 19\n        }\n      }, humidityList[buttonIndex] + \"  \", \"%\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 19\n        }\n      }, \"Wind:\"), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.rightTopValues,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 19\n        }\n      }, parseInt(weatherData[buttonIndex].windSpeed) + \"  \", \"kmph\")))), tempList.length == 8 && /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        container: true,\n        className: classes.weatherBar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }\n      }, hours.map((hour, index) => index == buttonIndex ? /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.checkedHour,\n        key: index,\n        onClick: () => handleHourClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: iconsList[index],\n        className: classes.smallIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.specificTemperature,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 23\n        }\n      }, tempList[index]), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 23\n        }\n      }, hour)) : /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        className: classes.unCheckedHour,\n        key: index,\n        onClick: () => handleHourClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: iconsList[index],\n        className: classes.smallIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.specificTemperature,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 23\n        }\n      }, tempList[index]), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 23\n        }\n      }, hour))))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        spacing: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: avgIcon,\n        className: classes.avgIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 1,\n        className: classes.minMaxTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 15\n        }\n      }, maxTemp), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.minTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }\n      }, minTemp)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        className: classes.avgPressureHumidity,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 15\n        }\n      }, \"Pressure:\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.avgPressureHumidityValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 15\n        }\n      }, avgPressure, \"hPa\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 2,\n        className: classes.avgPressureHumidity,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 15\n        }\n      }, \"Humidity:\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.avgPressureHumidityValue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 15\n        }\n      }, avgHumidity, \"%\")), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 3,\n        className: classes.minMaxTemp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 15\n        }\n      }, dates[0].dayOfWeek), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.dateUnderDay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }\n      }, dates[0].day + \"  \" + dates[0].month)), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        className: classes.expandButton,\n        onClick: handleExpandButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n        className: classes.expandIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 17\n        }\n      })))));\n    }\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n}\n\nexport default DayWindow;","map":{"version":3,"sources":["C:/Users/Krzysztof/Documents/GitHub/weather-forecast/src/components/day-window.jsx"],"names":["React","useState","useEffect","Grid","IconButton","makeStyles","SunIcon","CloudIcon","RainIcon","HailIcon","StormIcon","HeavyRainIcon","CloudsAndSunIcon","FogIcon","SnowIcon","CloudsAndMoonIcon","MoonIcon","TornadoIcon","NoPhotoIcon","ExpandMoreIcon","Rotate90DegreesCcw","useStyles","container","backgroundColor","color","padding","margin","marginLeft","marginRight","borderRadius","topContainer","marginTop","marginBottom","leftTopContainer","rightTopContainer","fontSize","paddingRight","paddingLeft","borderLeft","borderWidth","sectionsAlignment","rightTopValues","textAlign","weatherBar","avgIcon","width","height","bigIcon","smallIcon","minMaxTemp","currentTemp","minTemp","opacity","avgPressureHumidity","specificTemperature","avgPressureHumidityValue","dateUnderDay","expandButton","foldButton","float","expandIcon","foldIcon","transform","unCheckedHour","cursor","checkedHour","border","DayWindow","weatherData","timezone","classes","isExpanded","setIsExpanded","setAvgIcon","setMinTemp","maxTemp","setMaxTemp","avgPressure","setAvgPressure","avgHumidity","setAvgHumidity","tempList","setTempList","iconsList","setIconsList","buttonIndex","setButtonIndex","hours","setHours","dates","setDates","pressureList","setPressureList","humidityList","setHumidityList","fetch","console","log","fetchPressure","fetchHumidity","fetchDatesAndHours","fetchTemperatures","helpPressure","sum","i","length","push","pressure","parseInt","helpHumidity","humidity","helpHours","helpDates","helpString","dateToFormat","hourToFormat","dateTime","split","Date","parse","getTime","localOffset","getTimezoneOffset","setTime","toDateString","dayOfWeek","month","day","substring","fetchIcons","helpTemp","Math","round","temperature","helpIconArray","weatherMain","weatherDescription","helpHour","includes","mode","array","modeMap","maxEl","maxCount","el","handleExpandButton","handleHourClick","index","windSpeed","map","hour"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport SunIcon from \"../assets/images/sun.png\";\r\nimport CloudIcon from \"../assets/images/cloud.png\";\r\nimport RainIcon from \"../assets/images/rain.png\";\r\nimport HailIcon from \"../assets/images/hail.png\";\r\nimport StormIcon from \"../assets/images/storm.png\";\r\nimport HeavyRainIcon from \"../assets/images/heavy-rain.png\";\r\nimport CloudsAndSunIcon from \"../assets/images/clouds-and-sun.png\";\r\nimport FogIcon from \"../assets/images/fog.png\";\r\nimport SnowIcon from \"../assets/images/snow.png\";\r\nimport CloudsAndMoonIcon from \"../assets/images/clouds-and-moon.png\";\r\nimport MoonIcon from \"../assets/images/moon.png\";\r\nimport TornadoIcon from \"../assets/images/tornado.png\";\r\nimport NoPhotoIcon from \"../assets/images/no-photo.png\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { Rotate90DegreesCcw } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    backgroundColor: \"#273DFF\",\r\n    color: \"#EFEFEF\",\r\n    padding: 10,\r\n    margin: 20,\r\n    marginLeft: 100,\r\n    marginRight: 100,\r\n    borderRadius: 10,\r\n    \"& p\": {\r\n      margin: 1,\r\n    },\r\n  },\r\n  topContainer: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n  leftTopContainer: {\r\n    marginTop: 50,\r\n  },\r\n  rightTopContainer: {\r\n    fontSize: 30,\r\n    paddingRight: 40,\r\n    paddingLeft: 10,\r\n    borderLeft: \"solid\",\r\n    borderWidth: 1,\r\n  },\r\n  sectionsAlignment: {\r\n    marginTop: 17,\r\n  },\r\n  rightTopValues: {\r\n    textAlign: \"right\",\r\n  },\r\n  weatherBar: {\r\n    textAlign: \"center\",\r\n  },\r\n  avgIcon: {\r\n    width: 80,\r\n    height: 80,\r\n  },\r\n  bigIcon: {\r\n    width: 150,\r\n    height: 150,\r\n  },\r\n  smallIcon: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n  minMaxTemp: {\r\n    textAlign: \"right\",\r\n    fontSize: 30,\r\n  },\r\n  currentTemp: {\r\n    fontSize: 35,\r\n    textAlign: \"center\",\r\n  },\r\n  minTemp: {\r\n    opacity: \"50%\",\r\n  },\r\n  avgPressureHumidity: {\r\n    textAlign: \"center\",\r\n    fontSize: 23,\r\n  },\r\n  specificTemperature: {\r\n    fontSize: 30,\r\n  },\r\n  avgPressureHumidityValue: {\r\n    fontSize: 28,\r\n  },\r\n  dateUnderDay: {\r\n    fontSize: 20,\r\n  },\r\n  expandButton: {\r\n    textAlign: \"center\",\r\n    marginTop: 22,\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n  foldButton: {\r\n    float: \"right\",\r\n    width: 40,\r\n    height: 40,\r\n  },\r\n  expandIcon: {\r\n    fontSize: 30,\r\n    color: \"#C4C4C4\",\r\n  },\r\n  foldIcon: {\r\n    fontSize: 30,\r\n    color: \"#C4C4C4\",\r\n    transform: \"rotate(180deg)\",\r\n  },\r\n  unCheckedHour: {\r\n    cursor: \"pointer\",\r\n  },\r\n  checkedHour: {\r\n    border: \"solid\",\r\n    borderRadius: 15,\r\n  },\r\n});\r\n\r\nfunction DayWindow({ weatherData, timezone }) {\r\n  const classes = useStyles();\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [avgIcon, setAvgIcon] = useState(null);\r\n  const [minTemp, setMinTemp] = useState(\"\");\r\n  const [maxTemp, setMaxTemp] = useState(\"\");\r\n  const [avgPressure, setAvgPressure] = useState(\"\");\r\n  const [avgHumidity, setAvgHumidity] = useState(\"\");\r\n  const [tempList, setTempList] = useState(null);\r\n  const [iconsList, setIconsList] = useState(null);\r\n  const [buttonIndex, setButtonIndex] = useState(0);\r\n  const [hours, setHours] = useState(null);\r\n  const [dates, setDates] = useState(null);\r\n  const [pressureList, setPressureList] = useState(null);\r\n  const [humidityList, setHumidityList] = useState(null);\r\n\r\n  function fetch() {\r\n    console.log(weatherData);\r\n    fetchPressure();\r\n    fetchHumidity();\r\n    fetchDatesAndHours();\r\n    fetchTemperatures();\r\n  }\r\n\r\n  function fetchPressure() {\r\n    let helpPressure = [];\r\n    let sum = 0;\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      helpPressure.push(weatherData[i].pressure);\r\n      sum += weatherData[i].pressure;\r\n    }\r\n    let avgPressure = parseInt(sum / weatherData.length);\r\n    setAvgPressure(avgPressure);\r\n    setPressureList(helpPressure);\r\n  }\r\n\r\n  function fetchHumidity() {\r\n    let helpHumidity = [];\r\n    let sum = 0;\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      helpHumidity.push(weatherData[i].humidity);\r\n      sum += weatherData[i].humidity;\r\n    }\r\n    let avgHumidity = parseInt(sum / weatherData.length);\r\n    setAvgHumidity(avgHumidity);\r\n    setHumidityList(helpHumidity);\r\n  }\r\n\r\n  function fetchDatesAndHours() {\r\n    let helpHours = [];\r\n    let helpDates = [];\r\n    let helpString = [];\r\n    let dateToFormat;\r\n    let hourToFormat;\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      helpString = weatherData[i].dateTime.split(\" \");\r\n      dateToFormat = new Date(Date.parse(helpString[0]));\r\n      console.log(dateToFormat.getTime());\r\n      let localOffset = dateToFormat.getTimezoneOffset();\r\n      dateToFormat.setTime(\r\n        dateToFormat.getTime() + localOffset * 60 * 1000 + timezone * 1000\r\n      );\r\n      dateToFormat = dateToFormat.toDateString().split(\" \");\r\n      helpDates.push({\r\n        dayOfWeek: dateToFormat[0],\r\n        month: dateToFormat[1],\r\n        day: dateToFormat[2],\r\n      });\r\n      hourToFormat = helpString[1].substring(0, helpString[1].length - 3);\r\n      helpHours.push(hourToFormat);\r\n    }\r\n    setHours(helpHours);\r\n    setDates(helpDates);\r\n    fetchIcons(helpHours);\r\n  }\r\n\r\n  function fetchTemperatures() {\r\n    let tempList = [];\r\n    let helpTemp;\r\n    let maxTemp = -100;\r\n    let minTemp = 100;\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      helpTemp = Math.round(weatherData[i].temperature - 273.15);\r\n      if (helpTemp > maxTemp) maxTemp = helpTemp;\r\n      if (helpTemp < minTemp) minTemp = helpTemp;\r\n      helpTemp += \"°C\";\r\n      tempList.push(helpTemp);\r\n    }\r\n    minTemp += \"°C\";\r\n    maxTemp += \"°C\";\r\n    setMinTemp(minTemp);\r\n    setMaxTemp(maxTemp);\r\n    setTempList(tempList);\r\n  }\r\n\r\n  function fetchIcons(helpHours) {\r\n    let helpIconArray = [];\r\n    let weatherMain;\r\n    let weatherDescription;\r\n    let helpHour;\r\n    for (let i = 0; i < weatherData.length; i++) {\r\n      weatherMain = weatherData[i].weatherMain;\r\n      weatherDescription = weatherData[i].weatherDescription;\r\n      helpHour = parseInt(helpHours[i].substring(0, 2));\r\n      if (weatherMain == \"Clear\") {\r\n        if (helpHour >= 6 && helpHour <= 20) {\r\n          helpIconArray.push(SunIcon);\r\n        } else {\r\n          helpIconArray.push(MoonIcon);\r\n        }\r\n      } else if (\r\n        [\"broken clouds\", \"scattered clouds\", \"few clouds\"].includes(\r\n          weatherDescription\r\n        )\r\n      ) {\r\n        if (helpHour >= 6 && helpHour <= 20) {\r\n          helpIconArray.push(CloudsAndSunIcon);\r\n        } else {\r\n          helpIconArray.push(CloudsAndMoonIcon);\r\n        }\r\n      } else if (weatherDescription == \"overcast clouds\") {\r\n        helpIconArray.push(CloudIcon);\r\n      } else if ([\"Rain\", \"Drizzle\"].includes(weatherMain)) {\r\n        if (\r\n          [\r\n            \"light rain\",\r\n            \"moderate rain\",\r\n            \"freezing rain\",\r\n            \"light intensity shower rain\",\r\n          ].includes(weatherDescription) ||\r\n          weatherMain == \"Drizzle\"\r\n        ) {\r\n          helpIconArray.push(RainIcon);\r\n        } else {\r\n          helpIconArray.push(HeavyRainIcon);\r\n        }\r\n      } else if (weatherMain == \"Thunderstorm\") {\r\n        helpIconArray.push(StormIcon);\r\n      } else if (weatherMain == \"Snow\") {\r\n        helpIconArray.push(SnowIcon);\r\n      } else if ([\"Mist\", \"Fog\", \"Haze\"].includes(weatherMain)) {\r\n        helpIconArray.push(FogIcon);\r\n      } else if (weatherMain == \"Tornado\") {\r\n        helpIconArray.push(TornadoIcon);\r\n      } else {\r\n        helpIconArray.push(NoPhotoIcon);\r\n      }\r\n    }\r\n    let avgIcon = mode(helpIconArray);\r\n    setAvgIcon(avgIcon);\r\n    setIconsList(helpIconArray);\r\n  }\r\n\r\n  function mode(array) {\r\n    if (array.length == 0) return null;\r\n    var modeMap = {};\r\n    var maxEl = array[0],\r\n      maxCount = 1;\r\n    for (var i = 0; i < array.length; i++) {\r\n      if (array[i] == MoonIcon || array[i] == CloudsAndMoonIcon) continue;\r\n      var el = array[i];\r\n      if (modeMap[el] == null) modeMap[el] = 1;\r\n      else modeMap[el]++;\r\n      if (modeMap[el] > maxCount) {\r\n        maxEl = el;\r\n        maxCount = modeMap[el];\r\n      }\r\n    }\r\n    return maxEl;\r\n  }\r\n\r\n  function handleExpandButton() {\r\n    if (isExpanded) setIsExpanded(false);\r\n    else setIsExpanded(true);\r\n    console.log(isExpanded);\r\n  }\r\n\r\n  function handleHourClick(index) {\r\n    setButtonIndex(index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n    //fetchTemperatures();\r\n  }, []);\r\n\r\n  if (iconsList && tempList && hours) {\r\n    console.log(iconsList);\r\n    console.log(hours);\r\n    console.log(tempList);\r\n    if (isExpanded) {\r\n      return (\r\n        <div className={classes.container}>\r\n          <Grid container direction='column' spacing={2}>\r\n            <Grid item container className={classes.topContainer}>\r\n              <Grid item container xs={6} className={classes.leftTopContainer}>\r\n                <Grid item xs className={classes.currentTemp}>\r\n                  <p>{hours[buttonIndex]}</p>\r\n                  <p>{tempList[buttonIndex]}</p>\r\n                  <p className={classes.avgPressureHumidityValue}>\r\n                    {weatherData[buttonIndex].weatherDescription}\r\n                  </p>\r\n                </Grid>\r\n                <Grid item xs>\r\n                  <img\r\n                    src={iconsList[buttonIndex]}\r\n                    className={classes.bigIcon}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                direction='column'\r\n                className={classes.rightTopContainer}\r\n              >\r\n                <Grid item>\r\n                  <IconButton\r\n                    className={classes.foldButton}\r\n                    onClick={handleExpandButton}\r\n                  >\r\n                    <ExpandMoreIcon className={classes.foldIcon} />\r\n                  </IconButton>\r\n                </Grid>\r\n                <Grid item container className={classes.sectionsAlignment}>\r\n                  <Grid item xs>\r\n                    Pressure:\r\n                  </Grid>\r\n                  <Grid item xs className={classes.rightTopValues}>\r\n                    {pressureList[buttonIndex] + \"  \"}hPa\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Grid item xs>\r\n                    Humidity:\r\n                  </Grid>\r\n                  <Grid item xs className={classes.rightTopValues}>\r\n                    {humidityList[buttonIndex] + \"  \"}%\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Grid item xs>\r\n                    Wind:\r\n                  </Grid>\r\n                  <Grid item xs className={classes.rightTopValues}>\r\n                    {parseInt(weatherData[buttonIndex].windSpeed) + \"  \"}kmph\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {tempList.length == 8 && (\r\n              <Grid item container className={classes.weatherBar}>\r\n                {hours.map((hour, index) =>\r\n                  index == buttonIndex ? (\r\n                    <Grid\r\n                      item\r\n                      xs\r\n                      className={classes.checkedHour}\r\n                      key={index}\r\n                      onClick={() => handleHourClick(index)}\r\n                    >\r\n                      <img\r\n                        src={iconsList[index]}\r\n                        className={classes.smallIcon}\r\n                      />\r\n                      <p className={classes.specificTemperature}>\r\n                        {tempList[index]}\r\n                      </p>\r\n                      <p>{hour}</p>\r\n                    </Grid>\r\n                  ) : (\r\n                    <Grid\r\n                      item\r\n                      xs\r\n                      className={classes.unCheckedHour}\r\n                      key={index}\r\n                      onClick={() => handleHourClick(index)}\r\n                    >\r\n                      <img\r\n                        src={iconsList[index]}\r\n                        className={classes.smallIcon}\r\n                      />\r\n                      <p className={classes.specificTemperature}>\r\n                        {tempList[index]}\r\n                      </p>\r\n                      <p>{hour}</p>\r\n                    </Grid>\r\n                  )\r\n                )}\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className={classes.container}>\r\n          <Grid container spacing={6}>\r\n            <Grid item xs={2}>\r\n              <img src={avgIcon} className={classes.avgIcon} />\r\n            </Grid>\r\n            <Grid item xs={1} className={classes.minMaxTemp}>\r\n              <p>{maxTemp}</p>\r\n              <p className={classes.minTemp}>{minTemp}</p>\r\n            </Grid>\r\n            <Grid item xs={3} className={classes.avgPressureHumidity}>\r\n              <p>Pressure:</p>\r\n              <p className={classes.avgPressureHumidityValue}>\r\n                {avgPressure}hPa\r\n              </p>\r\n            </Grid>\r\n            <Grid item xs={2} className={classes.avgPressureHumidity}>\r\n              <p>Humidity:</p>\r\n              <p className={classes.avgPressureHumidityValue}>{avgHumidity}%</p>\r\n            </Grid>\r\n            <Grid item xs={3} className={classes.minMaxTemp}>\r\n              <p>{dates[0].dayOfWeek}</p>\r\n              <p className={classes.dateUnderDay}>\r\n                {dates[0].day + \"  \" + dates[0].month}\r\n              </p>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <IconButton\r\n                className={classes.expandButton}\r\n                onClick={handleExpandButton}\r\n              >\r\n                <ExpandMoreIcon className={classes.expandIcon} />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    return <></>;\r\n  }\r\n}\r\n\r\nexport default DayWindow;\r\n"]},"metadata":{},"sourceType":"module"}